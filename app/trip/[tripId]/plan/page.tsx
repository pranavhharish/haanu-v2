"use client"

import { Button } from "@/components/ui/button"
import { useEffect, useState } from "react"
import { useParams, useRouter } from "next/navigation"
import { TripPlanningLayout } from "@/components/trip-planning/trip-planning-layout"
import { Loader2, MapPin, Calendar, Users, DollarSign } from "lucide-react"
import { useAuth } from "@/components/auth-provider"
import { useTripPlanData } from "@/hooks/use-trip-plan-data"
import { Card, CardContent } from "@/components/ui/card"

export default function TripPlanPage() {
  const params = useParams()
  const router = useRouter()
  const { user, loading: authLoading } = useAuth()
  const tripId = params.tripId as string | null

  const {
    trip,
    activities,
    chatMessages,
    loading: tripDataLoading,
    error: tripDataError,
    isGeneratingItinerary,
    hasAutoGenerated,
    addActivity,
    updateActivity,
    deleteActivity,
    addChatMessage,
    reorderActivities,
    clearAllActivities,
    setIsGeneratingItinerary,
    setHasAutoGenerated,
    refetchData,
  } = useTripPlanData(tripId)

  const [autoGenerationStatus, setAutoGenerationStatus] = useState<"pending" | "generating" | "completed" | "error">(
    "pending",
  )

  useEffect(() => {
    if (authLoading) return
    if (!user) {
      router.push("/")
    }
  }, [user, authLoading, router])

  // Auto-generate itinerary when trip loads and no activities/messages exist
  useEffect(() => {
    if (
      trip &&
      !tripDataLoading &&
      !hasAutoGenerated &&
      activities.length === 0 &&
      chatMessages.length === 0 &&
      user &&
      autoGenerationStatus === "pending"
    ) {
      generateInitialItinerary()
    }
  }, [trip, tripDataLoading, hasAutoGenerated, activities.length, chatMessages.length, user, autoGenerationStatus])

  const generateInitialItinerary = async () => {
    if (!trip) return

    setAutoGenerationStatus("generating")
    setIsGeneratingItinerary(true)
    setHasAutoGenerated(true)

    try {
      console.log("Auto-generating initial itinerary for:", trip.name)

      // Calculate trip details
      const tripStartDate = new Date(trip.from_date)
      const tripEndDate = new Date(trip.to_date)
      const tripDuration = Math.ceil((tripEndDate.getTime() - tripStartDate.getTime()) / (1000 * 60 * 60 * 24)) + 1

      // Determine trip type based on interests
      const getTripType = (interests: string[]) => {
        if (interests.includes("adventure")) return "Adventure"
        if (interests.includes("culture")) return "Cultural"
        if (interests.includes("relaxation")) return "Relaxation"
        if (interests.includes("food")) return "Culinary"
        if (interests.includes("nightlife")) return "Entertainment"
        return "General Exploration"
      }

      const tripType = getTripType(trip.interests)

      // Create comprehensive user prompt for auto-generation
      const autoPrompt = `Please create a complete ${tripDuration}-day itinerary for my ${tripType.toLowerCase()} trip to ${trip.destination}. 

Trip Details:
- Destination: ${trip.destination}
- Duration: ${tripDuration} days (${trip.from_date} to ${trip.to_date})
- Budget: ${trip.currency} ${trip.budget.toLocaleString()}
- Travelers: ${trip.num_people} ${trip.num_people === 1 ? "person" : "people"}
- Trip Type: ${tripType}
- Interests: ${trip.interests.join(", ")}
${trip.custom_interests.length > 0 ? `- Special Interests: ${trip.custom_interests.join(", ")}` : ""}

Please provide a detailed day-by-day itinerary with specific times, locations, costs, and descriptions. Include restaurants, activities, and transportation suggestions that match our budget and interests.`

      // Prepare API trip details
      const apiTripDetails = {
        destination: trip.destination,
        duration: tripDuration,
        startDate: trip.from_date,
        endDate: trip.to_date,
        budget: `${trip.currency} ${trip.budget.toLocaleString()}`,
        interests: trip.interests,
        customInterests: trip.custom_interests,
        numPeople: trip.num_people,
        tripType: tripType,
      }

      // Save the auto-generation trigger message
      await addChatMessage({
        sender: "user",
        content: autoPrompt,
        metadata: { isAutoGenerated: true, triggerType: "initial_itinerary" },
      })

      // Call AI API for itinerary generation
      const response = await fetch("/api/chat/trip-plan", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          messages: [
            {
              role: "user",
              content: autoPrompt,
              id: `auto-gen-${Date.now()}`,
            },
          ],
          tripDetails: apiTripDetails,
        }),
      })

      if (!response.ok) {
        throw new Error(`AI API request failed: ${response.status} ${response.statusText}`)
      }

      if (!response.body) {
        throw new Error("AI API response body is missing")
      }

      // Stream the response
      const reader = response.body.getReader()
      const decoder = new TextDecoder()
      let fullResponseContent = ""

      while (true) {
        const { value, done } = await reader.read()
        if (done) break
        const chunk = decoder.decode(value, { stream: true })
        fullResponseContent += chunk
      }

      console.log("Auto-generated itinerary received:", fullResponseContent.substring(0, 200) + "...")

      if (fullResponseContent) {
        // Save the AI response
        await addChatMessage({
          sender: "ai",
          content: fullResponseContent,
          metadata: { isAutoGenerated: true, responseType: "initial_itinerary" },
        })

        setAutoGenerationStatus("completed")
        console.log("Initial itinerary auto-generation completed successfully")
      }
    } catch (error: any) {
      console.error("Error during auto-generation:", error)
      setAutoGenerationStatus("error")

      // Save error message
      await addChatMessage({
        sender: "ai",
        content: `I encountered an issue generating your initial itinerary: ${error.message}. Let's start planning your trip step by step! What would you like to do first in ${trip.destination}?`,
        metadata: { isAutoGenerated: true, responseType: "error" },
      })
    } finally {
      setIsGeneratingItinerary(false)
    }
  }

  const handleRegenerateItinerary = async () => {
    if (!trip) return

    // Clear existing activities and regenerate
    await clearAllActivities()
    setHasAutoGenerated(false)
    setAutoGenerationStatus("pending")
  }

  // Loading states
  if (authLoading || tripDataLoading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gradient-to-br from-orange-50 to-orange-100">
        <div className="text-center">
          <Loader2 className="h-12 w-12 animate-spin text-primary mx-auto mb-4" />
          <p className="text-lg text-gray-600 mb-2">Loading your trip plan...</p>
          <p className="text-sm text-gray-500">Preparing your personalized itinerary</p>
        </div>
      </div>
    )
  }

  // Error state
  if (tripDataError) {
    return (
      <div className="flex flex-col items-center justify-center h-screen text-red-500 bg-gradient-to-br from-red-50 to-red-100">
        <div className="text-center max-w-md">
          <p className="text-xl mb-2 font-semibold">Unable to Load Trip</p>
          <p className="mb-4 text-gray-600">{tripDataError}</p>
          <div className="space-x-2">
            <Button onClick={() => router.push("/dashboard")} variant="outline">
              Go to Dashboard
            </Button>
            <Button onClick={refetchData} className="bg-red-500 hover:bg-red-600">
              Try Again
            </Button>
          </div>
        </div>
      </div>
    )
  }

  // Trip not found
  if (!trip) {
    return (
      <div className="flex flex-col items-center justify-center h-screen text-gray-600 bg-gradient-to-br from-gray-50 to-gray-100">
        <div className="text-center max-w-md">
          <p className="text-xl mb-2 font-semibold">Trip Not Found</p>
          <p className="text-sm mb-4 text-gray-500">
            The trip with ID '{tripId}' could not be found or you don't have access to it.
          </p>
          <Button onClick={() => router.push("/dashboard")} className="bg-primary hover:bg-primary/90">
            Go to Dashboard
          </Button>
        </div>
      </div>
    )
  }

  // Auto-generation loading state
  if (autoGenerationStatus === "generating" || isGeneratingItinerary) {
    return (
      <div className="flex items-center justify-center h-screen bg-gradient-to-br from-orange-50 to-orange-100">
        <div className="text-center max-w-lg">
          <div className="mb-6">
            <Loader2 className="h-16 w-16 animate-spin text-primary mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Creating Your Perfect Itinerary</h2>
            <p className="text-gray-600 mb-4">
              Our AI is crafting a personalized{" "}
              {Math.ceil(
                (new Date(trip.to_date).getTime() - new Date(trip.from_date).getTime()) / (1000 * 60 * 60 * 24),
              ) + 1}
              -day adventure for {trip.destination}
            </p>
          </div>

          {/* Trip Summary Card */}
          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
            <CardContent className="p-6">
              <h3 className="font-semibold text-lg mb-4 text-gray-800">{trip.name}</h3>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div className="flex items-center space-x-2">
                  <MapPin className="h-4 w-4 text-primary" />
                  <span className="text-gray-600">{trip.destination}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Calendar className="h-4 w-4 text-primary" />
                  <span className="text-gray-600">
                    {new Date(trip.from_date).toLocaleDateString()} - {new Date(trip.to_date).toLocaleDateString()}
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <Users className="h-4 w-4 text-primary" />
                  <span className="text-gray-600">
                    {trip.num_people} {trip.num_people === 1 ? "traveler" : "travelers"}
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <DollarSign className="h-4 w-4 text-primary" />
                  <span className="text-gray-600">
                    {trip.currency} {trip.budget.toLocaleString()}
                  </span>
                </div>
              </div>
              {trip.interests.length > 0 && (
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <p className="text-xs text-gray-500 mb-2">Interests:</p>
                  <div className="flex flex-wrap gap-1">
                    {trip.interests.map((interest, index) => (
                      <span key={index} className="px-2 py-1 bg-primary/10 text-primary text-xs rounded-full">
                        {interest}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          <div className="mt-6 text-sm text-gray-500">
            <p>This may take a few moments while we research the best activities, restaurants, and experiences...</p>
          </div>
        </div>
      </div>
    )
  }

  // Main trip planning interface
  return (
    <div className="h-screen bg-gray-50">
      {/* Header with trip info and regenerate option */}
      <div className="bg-white border-b border-gray-200 px-4 py-3">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-semibold text-gray-800">{trip.name}</h1>
            <p className="text-sm text-gray-600">
              {trip.destination} • {activities.length} activities planned
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={handleRegenerateItinerary} disabled={isGeneratingItinerary}>
              {isGeneratingItinerary ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Regenerating...
                </>
              ) : (
                "Regenerate Itinerary"
              )}
            </Button>
            <Button variant="outline" size="sm" onClick={() => router.push("/dashboard")}>
              Back to Dashboard
            </Button>
          </div>
        </div>
      </div>

      <TripPlanningLayout
        trip={trip}
        activities={activities}
        chatMessages={chatMessages}
        onAddActivity={addActivity}
        onUpdateActivity={updateActivity}
        onDeleteActivity={deleteActivity}
        onAddChatMessage={addChatMessage}
        onReorderActivities={reorderActivities}
        isGeneratingItinerary={isGeneratingItinerary}
      />
    </div>
  )
}
